# ======= Build image =======
FROM public.ecr.aws/docker/library/python:3.9-alpine AS build-image

RUN apk update \
    && apk add --update alpine-sdk linux-headers

WORKDIR /app
COPY ./requirements.txt .

ENV VIRTUAL_ENV=/app/.venv
RUN python -m venv $VIRTUAL_ENV

ENV PATH="$VIRTUAL_ENV/bin:$PATH"

RUN python -m pip install --upgrade pip \
    && python -m pip install -r requirements.txt

# ======= Production image =======
FROM public.ecr.aws/docker/library/python:3.9-alpine AS runtime-image

LABEL org.opencontainers.image.source=https://github.com/pvital/simple-django
LABEL org.opencontainers.image.description="Simple Django container"
LABEL org.opencontainers.image.licenses=MIT

# Configure the thread stack size to 2MB
ENV PTHREAD_STACK_MIN 2097152

# Keeps Python from generating .pyc files in the container
ENV PYTHONDONTWRITEBYTECODE 1

# Turns off buffering for easier container logging
ENV PYTHONUNBUFFERED 1

# Copy the project into the container
ENV VIRTUAL_ENV=/app/.venv

WORKDIR /app

COPY ./mysite ./mysite
COPY ./simple_app ./simple_app
COPY ./db.sqlite3 ./
COPY ./manage.py ./
COPY ./uwsgi.ini ./

COPY --from=build-image $VIRTUAL_ENV .venv

# Creates a non-root user and adds permission to access the /app folder
RUN addgroup -g 1000 admin \
    && adduser -u 1002 -g admin -D user \
    && chown -R user:admin /app
USER user

# Set up environment variables
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

EXPOSE 8000

# Run the application
CMD exec uwsgi --http 0.0.0.0:8000 --ini uwsgi.ini
